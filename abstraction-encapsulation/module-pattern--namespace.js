// Module pattern y namespaces: propiedades privadas en JavaScript

/*
En JavaScript no tenemos keywords para indicar que un atributo es
privado o pÃºblico a diferencia de otros lenguajes de programaciÃ³n.
Sin embargo, podemos aplicar ciertas tÃ©cnicas y mÃ©todos para lograrlo.
En JavaScript no tenemos keywords para indicar que un atributo es privado
o pÃºblico a diferencia de otros lenguajes de programaciÃ³n. Sin embargo,
podemos aplicar ciertas tÃ©cnicas y mÃ©todos para lograrlo.

Atributos pÃºblicos y privados en JavaScript
Modificaremos la funciÃ³n creada anteriormente con la que podÃ­amos generar
nuevos objetos. Esto con la finalidad de separar los atributos que queremos
que sean privados (por ahora solo el atributo name) y pÃºblicos, ademÃ¡s de crear
2 funciones: una para poder modificar el atributo privado y otra para obtener
el valor de esa propiedad privada:

  1. Declaramos un objeto privateAtributos en el que colocaremos las propiedades
  que deseamos que sean privadas y otro objeto publicAtributos en el que queremos
  que sean pÃºblicas. Por ahora, solo name serÃ¡ privada y por convenciÃ³n se coloca
  un guion bajo delante del nombre de aquel atributo privado:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = { // ðŸ‘ˆðŸ‘ˆ
		// '_name' es el atributo privado
		// 'name' es el parÃ¡metro que recibe la funciÃ³n
    "_name": name,
  };

  const publicAtributos = { // ðŸ‘ˆðŸ‘ˆ
		// El resto de atributos serÃ¡n pÃºblicos:
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    }
  }

  return publicAtributos ;
}

/*
  Por consiguiente, solo retornaremos publicAtributos, pues contiene las propiedades
  a las que sÃ­ podrÃ¡n acceder los usuarios.

  2. Crearemos las funciones con las que el usuario puede editar y
  leer el valor del atributo privado _name:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
  }

  const publicAtributos = {
		// El resto de atributos serÃ¡n pÃºblicos:
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		readName() { // ðŸ‘ˆðŸ‘ˆ
      return privateAtributos["_name"];
    },
    changeName(newName) { // ðŸ‘ˆðŸ‘ˆ
      privateAtributos["_name"] = newName;
    },
  }

  return publicAtributos ;
};

/*
  3. Finalmente, deberÃ­amos evitar que el usuario modifique o elimine los mÃ©todos
  readName y changeName y dar asÃ­ mejor seguridad a estos. Con Object.defineProperty
  haremos las configuraciones respectivas para evitar lo mencionado:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
  };

  const publicAtributos = {
		// El resto de atributos serÃ¡n pÃºblicos:
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		readName() {
      return privateAtributos["_name"];
    },
    changeName(newName) {
      privateAtributos["_name"] = newName;
    },
  };

	Object.defineProperty(publicAtributos, "readName", { // ðŸ‘ˆðŸ‘ˆ
    writable: false,
    configurable: false,
  });
  Object.defineProperty(publicAtributos, "changeName", { // ðŸ‘ˆðŸ‘ˆ
    writable: false,
    configurable: false,
  });

  return publicAtributos ;
}

// Creamos un nuevo objeto
const juan = createStudent({ email: "juanito@frijoles.co", name: "Juanito" });

// Intentamos eliminar y alterar los mÃ©todos changeName y readName
delete juan.changeName; // false
delete juan.readName; // false
juan.changeName = function (nombreImpostor) { // NO se ve afectada la funciÃ³n original
	return "patatas";
};

/*
  La desventaja de protegerlos es que no nos permitirÃ­a trabajar
  con el polimorfismo (uno de los pilares de POO).

El funcionamiento de nuestros mÃ©todos generados changeName y readName es muy
similar a los Getters y Setters. Veamos cÃ³mo aplicar estos en JavaScript. ðŸ¤”ðŸ’ª
*/