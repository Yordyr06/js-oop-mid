// Factory pattern y RORO
/* Factory pattern (o f치brica de objeto) y RORO (Recibir un Objeto, Retornar un Objeto)
son dos patrones que nos ayudan a crear moldes de objetos a partir de funciones.
Con ello ya no ser칤a necesario utilizar objetos literales ni deep copy con recursividad.

Generando objetos a partir de funciones
Generaremos una funci칩n que nos permita generar nuevos estudiantes.
Esta funci칩n va a recibir un objeto (con los datos del nuevo estudiante)
como par치metro y devolver치 el nuevo objeto generado.*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function createStudent({
  name,
  email,
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses,
  learningPaths,
}) {
  return {
    name,
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
  };
}

/*Antes de crear nuevos objetos, podr칤amos darles unas mejoras a nuestra funci칩n:

Los atributos approvedCourses y learningPaths deber칤an ser arreglos vac칤os por
defecto y as칤 evitamos que sean undefined en caso de que no se env칤en datos en el
momento que se genere un nuevo estudiante:*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function createStudent({
  name,
  email,
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [], // 游녣游녣
  learningPaths = [], // 游녣游녣
}) {
  return {
    name,
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
  };
}

/*Si en caso de invocar a la funci칩n createStudent no mandamos siquiera un
objeto vac칤o como argumento, nos dar치 un error. Evitemos esto declarando que
el par치metro que recibe la funci칩n puede ser un objeto vac칤o por defecto:*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function createStudent({
  name,
  email,
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) { // 游녣游녣
  return {
    name,
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
  };
}

/*Deber칤amos hacer que algunos campos como email sean obligatorios de enviar,
pues, no todos los atributos se deber칤an quedar como undefined ni tampoco deber칤amos
poner valores por defecto a ciertos datos personales de un estudiante.
Por tanto, deber칤amos avisar mediante un mensaje de error personalizado
que ciertos campos son obligatorios:*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

// Creamos una funci칩n con el objetivo de generar un Error el cual
// tendr치 un mensaje customizado por nosotros.
// Como par치metro indicamos el nombre del atributo que no se est치 enviando (String)
function requiredParam(param) { // 游녣游녣
  throw new Error(param + " es obligatorio"); // Este es el mensaje de error generado
}

function createStudent({
	// Por defecto, invocamos a la nueva funci칩n requiredParam en aquellos
	// atributos que deseamos que sean obligatorios. Indicamos como argumento el nombre
	// de dicho atributo.
  name = requiredParam("name"), // 游녣游녣
  email = requiredParam("email"), // 游녣游녣
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  return {
    name,
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
  };
}

/* Ahora, si intentamos crear un objeto que no tenga, por ejemplo, asignado un valor en
la propiedad name, la consola nos mostrar치 el mensaje de error que creamos: */

const juan = createStudent({ email: "juanito@frijoles.co"});