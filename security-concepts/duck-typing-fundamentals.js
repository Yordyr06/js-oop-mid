/* 

Qu√© es duck typing

El duck typing es la forma de programar donde identificamos los elementos por
los m√©todos y atributos que tenga por dentro.

C√≥mo funciona el duck typing
Se deben tener par√°metros para saber diferenciar dos cosas, dos personas, dos elementos, etc.
Si queremos determinar qui√©n es qui√©n, se debe mirar por sus atributos y m√©todos,
aunque puede haber el caso en el que haya elementos parecidos que tambi√©n se deben
diferenciar (impostores), es cuando m√°s detalle se debe poner en identificar qu√© los compone.

El nombre proviene de la frase:
  - Si parece un pato y grazna como un pato, es un pato.

  - En otras palabras, tiene que cumplir con ciertos m√©todos y atributos para considerarse alguna cosa.


Duck typing en JavaScript
Vamos a definir cu√°les son las propiedades que deben tener ciertos objetos para determinar cu√°l
es cu√°l y as√≠ construir objetos m√°s completos.

Validando que un objeto tenga lo necesario
Vamos a validar que cuando generemos un nuevo estudiante, las rutas de aprendizajes tengan
los datos necesarios para poder ser agregados en el array del atributo learningPaths:

  1) Creamos una funci√≥n createLearningPath para poder generar nuevas rutas de aprendizaje.
    Aqu√≠ validaremos que tenga los atributos necesarios:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createLearningPath({ // üëàüëà
	name = requiredParam("name"), // Campo obligatorio
	courses = [], // Lista de Cursos que pertencen a la ruta de aprendizaje
}) {}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
  };

  const publicAtributos = {
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		get name() {
      return privateAtributos["_name"];
    },
		set name(newName) {
      if (newName.length != 0) {
        privateAtributos["_name"] = newName;
      } else {
        console.warn("Tu nombre debe tener al menos 1 caracter");
      }
    },
  };

  return publicAtributos;
}

/*
  2) Creamos 2 variables en las que dividiremos nuestras propiedades p√∫blicas y privadas:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createLearningPath({
	name = requiredParam("name"), // Campo es obligatorio
	courses = [], // Lista de Cursos que pertencen a la ruta de aprendizaje
}) {
	const private = { // üëàüëà Atributos privados
		"_name": name,
		"_courses": courses,
	};
	const public = {}; // üëàüëà
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
  };

  const publicAtributos = {
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		get name() {
      return privateAtributos["_name"];
    },
		set name(newName) {
      if (newName.length != 0) {
        privateAtributos["_name"] = newName;
      } else {
        console.warn("Tu nombre debe tener al menos 1 caracter");
      }
    },
  };

  return publicAtributos;
}

/*
En la variable public definiremos los getters y setters para los atributos name y courses:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createLearningPath({
	name = requiredParam("name"), // Campo es obligatorio
	courses = [], // Lista de Cursos que pertencen a la ruta de aprendizaje
}) {
	const private = { // Atributos privados
		"_name": name,
		"_courses": courses,
	};
	const public = { // üëàüëà Getters y Setters
		get name() {
			return private["_name"];
		},
		set name(newName) {
			if (newName.length != 0) {
				private["_name"] = newName;
			} else {
				console.warn("El nombre debe tener al menos 1 caracter");
			}
		},
		get courses() {
			return private["_courses"];
		},
	};
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
  };

  const publicAtributos = {
    email,
    age,
    approvedCourses,
    learningPaths,
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		get name() {
      return privateAtributos["_name"];
    },
		set name(newName) {
      if (newName.length != 0) {
        privateAtributos["_name"] = newName;
      } else {
        console.warn("Tu nombre debe tener al menos 1 caracter");
      }
    },
  };

  return publicAtributos;
}

/*
  En este caso no definimos un setter a courses, ya que no cualquiera deber√≠a realizar asignaciones a ese atributo.

  4) Ahora en la funci√≥n createStudent eliminamos el atributo learningPaths de los atributos p√∫blicos
    y lo pasamos al objeto de atributos privados. Luego, generaremos el getter y setter respectivo:
*/

function isObject(subject) {
  return typeof subject == "object";
}

function isArray(subject) {
  return Array.isArray(subject);
}

function requiredParam(param) {
  throw new Error(param + " es obligatorio");
}

function createLearningPath({
	name = requiredParam("name"), // Campo es obligatorio
	courses = [], // Lista de Cursos que pertencen a la ruta de aprendizaje
}) {
	const private = { // Atributos privados
		"_name": name,
		"_courses": courses,
	};
	const public = { // Getters y Setters
		get name() {
			return private["_name"];
		},
		set name(newName) {
			if (newName.length != 0) {
				private["_name"] = newName;
			} else {
				console.warn("El nombre debe tener al menos 1 caracter");
			}
		},
		get courses() {
			return private["_courses"];
		},
	};
}

function createStudent({
  name = requiredParam("name"),
  email = requiredParam("email"),
  age,
  twitter,
  instagram,
  facebook,
  approvedCourses = [],
  learningPaths = [],
} = {}) {
  const privateAtributos = {
    "_name": name,
		"_learningPaths": learningPaths, // üëàüëà
  };

  const publicAtributos = {
    email,
    age,
    approvedCourses,
    //learningPaths,üëàüëà
    socialMedia: {
      twitter,
      instagram,
      facebook,
    },
		get name() {
      return privateAtributos["_name"];
    },
		set name(newName) {
      if (newName.length != 0) {
        privateAtributos["_name"] = newName;
      } else {
        console.warn("Tu nombre debe tener al menos 1 caracter");
      }
    },
		get learningPaths() { // üëàüëà
			return private["__learningPaths"];
		},
		set learningPaths(newLP) { // üëàüëà
			// AQU√ç empezamos a aplicar DUCK TYPING üëÄü¶Ü
      if (!newLP.name) {
				// Si la nueva ruta de aprendizaje NO tiene el atributo "name"...
        console.warn("Tu LP no tiene la propiedad name");
        return; // Cortamos el proceso y no agregamos la ruta de aprendizaje
      }

      if (!newLP.courses) {
				// Si la nueva ruta NO tiene asignado un array
				// en el atributo "courses"
        console.warn("Tu LP no tiene courses");
        return; // Cortamos el proceso y no agregamos la ruta de aprendizaje
      }

      if (!isArray(newLP.courses)) {
				// Si el atributo "courses" en la nueva ruta de aprendizaje NO es un Array
        console.warn("Tu LP no es una lista (*de cursos)");
        return; // Cortamos el proceso y no agregamos la ruta de aprendizaje
      }

			// Si la nueva ruta de aprendizaje pas√≥ por todas las validaciones
			// correctamente...Quiere decir que S√ç es una ruta v√°lida tal como
			// la deseamos que fuese. Por tanto, procedemos a a√±adir ese Learning Path
			// a la lista de rutas del estudiante:
      private["_learningPaths"].push(newLP);
    },
  };

  return publicAtributos;
}

/*
Ser o parecer una instancia de otro objeto
Ahora ya podr√≠amos a√±adir nuevas rutas con los atributos que esperamos que tenga una
ruta de aprendizaje a los nuevos estudiantes:
*/

// NUEVO ESTUDIANTE:
const juan = createStudent({email:"juanito@frijoles.co",name:"Juanito"});

// Le asignamos al estudiante "juan" un ruta de aprendizaje:
juan.learningPaths = {
	name: "Escuela de Desarrollo Web",
	courses: [],
}

/* En teor√≠a, la ruta que a√±adimos es un learning path, sin embargo, no hemos validado
que se haya generado esa ruta de aprendizaje con la funci√≥n generadora de learning paths
(createLearningPath). Es decir, nosotros no creamos la ruta de ‚Äúdesarrollo web‚Äù de este modo: */

const escuelaWeb = createLearningPath({
	name: "Escuela de Desarrollo Web",
	courses: []
})

/*
Si no que lo hicimos directamente en el objeto juan. El objeto escuelaWeb es una ruta que
hered√≥ las propiedades de la funci√≥n f√°brica de learning paths y el otro es uno que producimos
directamente desde el objeto juan.

Lo anterior nos lleva al problema SER o TENER: no estamos validando si nuestros learning paths
son realmente objetos que se construyeron desde createLearningPath, lo que validamos es que s√≠
tienen los atributos que esperar√≠amos que tenga una ruta de aprendizaje.
*/